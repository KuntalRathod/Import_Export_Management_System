<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quotation List</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #e6e9f0 0%, #eef1f5 100%);
            margin: 0;
            padding: 20px;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: flex-start;
        }

        .container {
            width: 100%;
            max-width: 100%; /* Fits within viewport */
        }

        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
            font-size: 2rem;
            font-weight: 500;
            letter-spacing: 1px;
        }

        .create-btn {
            display: inline-block;
            padding: 10px 20px;
            background: rgba(255, 255, 255, 0.2);
            color: #333;
            text-decoration: none;
            border-radius: 8px;
            font-weight: 500;
            backdrop-filter: blur(10px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            transition: background 0.3s ease, transform 0.2s ease;
            margin-bottom: 20px;
        }

        .create-btn:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }

        .table-wrapper {
            background: rgba(255, 255, 255, 0.15);
            border-radius: 12px;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
            padding: 10px;
        }

        table {
            width: 100%;
            table-layout: fixed; /* Ensures columns distribute evenly */
            border-collapse: collapse;
        }

        th, td {
            padding: 15px 20px;
            text-align: left;
            font-size: 0.9rem;
            color: #444;
            overflow-wrap: break-word; /* Allows text to wrap */
        }

        th {
            background: rgba(255, 255, 255, 0.25);
            color: #222;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        tr {
            transition: background 0.3s ease;
        }

        tr:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .action-btn, .doc-btn {
            position: relative;
            display: inline-block;
        }

        .action-toggle, .doc-toggle {
            padding: 8px 16px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
            background: rgba(255, 255, 255, 0.3);
            color: #333;
            backdrop-filter: blur(5px);
            transition: background 0.3s ease;
        }

        .action-toggle:hover, .doc-toggle:hover {
            background: rgba(255, 255, 255, 0.4);
        }

        .dropdown {
            display: none;
            position: absolute;
            background: rgba(255, 255, 255, 0.9);
            min-width: 140px;
            border-radius: 6px;
            backdrop-filter: blur(10px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            z-index: 10;
            right: 0;
        }

        .action-btn:hover .dropdown, .doc-btn:hover .dropdown {
            display: block;
        }

        .dropdown button {
            display: block;
            width: 100%;
            padding: 10px 14px;
            border: none;
            background: none;
            text-align: left;
            cursor: pointer;
            font-size: 0.85rem;
            color: #333;
            transition: background 0.2s ease;
        }

        .dropdown button:hover {
            background: rgba(0, 0, 0, 0.05);
        }

        .edit-btn {
            color: #007bff;
        }

        .delete-btn {
            color: #dc3545;
        }

        .view-quotation, .view-excel {
            color: #28a745;
        }

        .download-pdf, .download-excel {
            color: #fd7e14;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            th, td {
                padding: 10px 15px;
                font-size: 0.8rem;
            }

            .action-toggle, .doc-toggle {
                padding: 6px 12px;
            }

            .dropdown {
                min-width: 120px;
            }
        }
        .send-mail-btn {
        color: #17a2b8;
    }
    .modal-content {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 12px;
    }
    .btn-primary {
        background: #17a2b8;
        border: none;
    }
    .btn-primary:hover {
        background: #138496;
    }
 #viewAttachmentBtn {
        margin-right: 10px;
        background: #17a2b8;
        border: none;
        color: white;
    }
    #viewAttachmentBtn:hover {
        background: #138496;
    }
    #attachmentName {
        font-style: italic;
        color: #666;
    }
    .chart-btn {
            display: inline-block;
            padding: 10px 20px;
            background: rgba(255, 255, 255, 0.2);
            color: #333;
            text-decoration: none;
            border-radius: 8px;
            font-weight: 500;
            backdrop-filter: blur(10px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            transition: background 0.3s ease, transform 0.2s ease;
            margin-bottom: 20px;
        }

        .chart-btn:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Quotation List</h1>
        <a href="/quotation" class="create-btn">Create New Quotation</a>

        <a href="/chart" class="chart-btn">Chart Analysis</a>

        <div class="table-wrapper">
            <table>
                <thead>
                    <tr>
                        <th>Quotation ID</th>
                        <th>Date</th>
                        <th>Consignee Name</th>
                        <th>Country</th>
                        <th>Port</th>
                        <th>Currency</th>
                        <th>Total Net Weight</th>
                        <th>Total Gross Weight</th>
                        <th>Total (Native)</th>
                        <th>Total (INR)</th>
                        <th>Documents</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% quotations.forEach(quotation => { %>
                        <tr>
                            <td><%= quotation.id %></td>
                            <td><%= quotation.date %></td>
                            <td><%= quotation.Consignee.name %></td>
                            <td><%= quotation.Country.country_name %></td>
                            <td><%= quotation.Port.portName %></td>
                            <td><%= quotation.Currency.currency %></td>
                            <td><%= quotation.totalNetWeight %></td>
                            <td><%= quotation.totalGrossWeight %></td>
                            <td><%= quotation.total_native %></td>
                            <td><%= quotation.total_inr %></td>
                            <td>
                                <div class="doc-btn">
                                    <button class="doc-toggle">Docs ▼</button>
                                    <div class="dropdown">
                                        <button class="view-quotation" onclick="viewQuotation('<%= quotation.id %>')">
                                            View PDF
                                        </button>
                                        <button class="download-pdf" onclick="downloadPDF('<%= quotation.id %>')">
                                            Download PDF
                                        </button>
                                        <button class="view-excel" onclick="viewExcel('<%= quotation.id %>')">
                                            View Excel
                                        </button>
                                        <button class="download-excel" onclick="downloadExcel('<%= quotation.id %>')">
                                            Download Excel
                                        </button>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <div class="action-btn">
                                    <button class="action-toggle">Actions ▼</button>
                                    <div class="dropdown">
                                        <button class="edit-btn" onclick="editQuotation('<%= quotation.id %>')">
                                            Edit
                                        </button>
                                        <button class="delete-btn" onclick="deleteQuotation('<%= quotation.id %>')">
                                            Delete
                                        </button>
                                         <button class="send-mail-btn" onclick="showSendMailModal('<%= quotation.id %>')">
                                            Send Mail
                                        </button>

                                    </div>
                                </div>
                            </td>
                        </tr>
                    <% }); %>
                </tbody>
            </table>
        </div>
    </div>

     <!-- Send Mail Modal -->
<div class="modal fade" id="sendMailModal" tabindex="-1" aria-labelledby="sendMailModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="sendMailModalLabel">Send Quotation Email</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="sendMailForm" enctype="multipart/form-data">
                    <input type="hidden" id="quotationId" name="quotationId">
                    
                    <div class="mb-3">
                        <label for="subject" class="form-label">Subject</label>
                        <input type="text" class="form-control" id="subject" name="subject" required>
                    </div>

                    <div class="mb-3">
                        <label for="receiverEmail" class="form-label">Receiver Email</label>
                        <input type="email" class="form-control" id="receiverEmail" name="receiverEmail" required>
                    </div>

                    <div class="mb-3">
                        <label for="ccEmail" class="form-label">CC Email (optional)</label>
                        <input type="email" class="form-control" id="ccEmail" name="ccEmail">
                    </div>

                    <div class="mb-3">
                        <label for="replyTo" class="form-label">Reply To Email</label>
                        <input type="email" class="form-control" id="replyTo" name="replyTo" required>
                    </div>

                    <div class="mb-3">
                        <label for="content" class="form-label">Content</label>
                        <textarea class="form-control" id="content" name="content" rows="3" required></textarea>
                    </div>

                    <div class="mb-3">
                        <label for="attachments" class="form-label">Attachments (PDF, Excel, Images)</label>
                        <input type="file" class="form-control" id="attachments" name="attachments" multiple accept=".pdf,.xlsx,.jpg,.jpeg,.png">
                        <small class="form-text text-muted">You can upload up to 10 files (max 5MB each).</small>
                    </div>

                    <div class="mb-3">
                        <button type="button" class="btn btn-sm btn-info" id="viewAttachmentBtn" onclick="viewAttachment()">View Quotation PDF</button>
                        <span id="attachmentName">Quotation-<span id="attachmentId"></span>.pdf</span>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="sendEmail()">Send Email</button>
            </div>
        </div>
    </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/JS/quotationListScript.js"></script>
    <!-- <script>
        function viewQuotation(id) {
            fetch(`/quotation/${id}/pdf`)
                .then((response) => response.json())
                .then((data) => {
                    if (data.pdfUrl) {
                        window.open(data.pdfUrl, "_blank");
                    } else {
                        console.error("No PDF URL returned");
                        alert("Failed to retrieve quotation PDF");
                    }
                })
                .catch((error) => {
                    console.error("Error fetching PDF URL:", error);
                    alert("Error retrieving quotation PDF");
                });
        }

        function downloadPDF(id) {
            fetch(`/quotation/${id}/pdf`)
                .then((response) => response.json())
                .then((data) => {
                    if (data.pdfUrl) {
                        const link = document.createElement("a");
                        link.href = data.pdfUrl;
                        link.download = `quotation-${id}.pdf`;
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                    } else {
                        console.error("No PDF URL returned");
                    }
                })
                .catch((error) => console.error("Error fetching PDF URL:", error));
        }

  function viewExcel(id) {
    fetch(`/quotation/${id}/excel`)
      .then((response) => {
        if (!response.ok) {
          throw new Error(`Server returned ${response.status}: ${response.statusText}`);
        }
        return response.json();
      })
      .then((data) => {
        if (data.excelUrl) {
          console.log("Fetching Excel from:", data.excelUrl);
          fetch(data.excelUrl, {
            method: "GET",
            headers: {
              "Accept": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            },
          })
            .then((res) => {
              if (!res.ok) {
                throw new Error(`Failed to fetch Excel file: ${res.status} ${res.statusText}`);
              }
              console.log("Excel file response headers:", res.headers);
              return res.arrayBuffer();
            })
            .then((arrayBuffer) => {
              console.log("ArrayBuffer length:", arrayBuffer.byteLength);
              if (arrayBuffer.byteLength === 0) {
                throw new Error("Received empty Excel file");
              }
              const workbook = XLSX.read(new Uint8Array(arrayBuffer), { type: "array" });
              const firstSheetName = workbook.SheetNames[0];
              console.log("Sheet name:", firstSheetName);
              const worksheet = workbook.Sheets[firstSheetName];
              const htmlString = XLSX.utils.sheet_to_html(worksheet, { editable: false });

              const newWindow = window.open("", "_blank");
              newWindow.document.write(`
                <html>
                  <head>
                    <title>Quotation ${id} - Excel View</title>
                    <style>
                      body { font-family: Arial, sans-serif; padding: 20px; }
                      table { border-collapse: collapse; width: 100%; }
                      th, td { border: 1px solid #ddd; padding: 8px; text-align: center; }
                      th { background-color: #4CAF50; color: white; }
                      tr:nth-child(even) { background-color: #f2f2f2; }
                    </style>
                  </head>
                  <body>
                    <h2>Quotation ${id} - Excel View</h2>
                    ${htmlString}
                  </body>
                </html>
              `);
              newWindow.document.close();
            })
            .catch((error) => {
              console.error("Error parsing Excel file:", error);
              alert("Failed to parse Excel file: " + error.message);
            });
        } else {
          console.error("No Excel URL returned");
          alert("Failed to retrieve quotation Excel");
        }
      })
      .catch((error) => {
        console.error("Error fetching Excel URL:", error);
        alert("Error retrieving quotation Excel: " + error.message);
      });
  }
  function downloadExcel(id) {
    fetch(`/quotation/${id}/excel`)
      .then((response) => response.json())
      .then((data) => {
        if (data.excelUrl) {
          const link = document.createElement("a");
          link.href = data.excelUrl;
          link.download = `quotation-${id}.xlsx`;
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
        } else {
          console.error("No Excel URL returned");
        }
      })
      .catch((error) => console.error("Error fetching Excel URL:", error));
  }

        function editQuotation(id) {
            window.location.href = `/quotation/${id}/edit`;
        }

        function deleteQuotation(id) {
            if (confirm('Are you sure you want to delete this quotation?')) {
                fetch(`/quotation/${id}`, {
                    method: 'DELETE',
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to delete quotation');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log(data.message);
                    window.location.reload();
                })
                .catch(error => {
                    console.error('Error deleting quotation:', error);
                    alert('Failed to delete quotation');
                });
            }
        }
let currentQuotationId;

    function showSendMailModal(id) {
        currentQuotationId = id;
        document.getElementById('quotationId').value = id;
        document.getElementById('subject').value = `Quotation ${id} - Details`;
        document.getElementById('content').value = `Dear Customer,\n\nPlease find attached Quotation ${id} for your reference.\n\nBest regards,\nYour Company Name`;
        document.getElementById('attachmentId').textContent = id;
        const modal = new bootstrap.Modal(document.getElementById('sendMailModal'));
        modal.show();
    }

    function viewAttachment() {
        if (currentQuotationId) {
            fetch(`/quotation/${currentQuotationId}/pdf`)
                .then((response) => response.json())
                .then((data) => {
                    if (data.pdfUrl) {
                        window.open(data.pdfUrl, "_blank");
                    } else {
                        alert("PDF not available");
                    }
                })
                .catch((error) => {
                    console.error("Error fetching PDF:", error);
                    alert("Error retrieving PDF");
                });
        }
    }

    function sendEmail() {
        const form = document.getElementById('sendMailForm');
        const formData = new FormData(form);

        fetch('/quotation/send-email', {
            method: 'POST',
            body: formData, // Send FormData directly, including files
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Email sent successfully!');
                bootstrap.Modal.getInstance(document.getElementById('sendMailModal')).hide();
            } else {
                alert('Failed to send email: ' + data.error);
            }
        })
        .catch(error => {
            console.error('Error sending email:', error);
            alert('Error sending email');
        });
    }
    </script> -->
</body>
</html>
